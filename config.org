#+TITLE: nlz's Doom Emacs Co.
#+Startup: showeverything


* TABLE OF CONTENTS:toc:
- [[#about-this-config][About This Config]]
- [[#user-information][User Information]]
- [[#centaur-tabs][Centaur Tabs]]
- [[#doom-theme][Doom Theme]]
- [[#fonts][Fonts]]
  - [[#ligature-test][Ligature Test:]]
- [[#emoji][Emoji]]
- [[#terminal-mouse-mode][Terminal Mouse Mode]]
- [[#open-specific-files][OPEN SPECIFIC FILES]]
- [[#org-mode][Org Mode]]
- [[#spell-checking][Spell Checking]]
- [[#line-numbers][Line Numbers]]
- [[#ivy][IVY]]
  - [[#ivy-posframe][IVY-POSFRAME]]
  - [[#ivy-keybindings][IVY KEYBINDINGS]]

* About This Config
This is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the "evil" / vim keybindings and includes several nice extensions and some default configuration

* User Information
Some Functionality uses this to identify you
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Nevin Zheng"
      user-mail-address "nevzheng@gmail.com")
#+END_SRC
* Centaur Tabs
Enable tabs in `init.el`.
| COMMAND                     | DESCRIPTION               | KEYBINDING       |
|-----------------------------+---------------------------+------------------|
| centaur-tabs-mode           | /Toggle tabs globally/      | SPC t c          |
| centaur-tabs-local-mode     | /Toggle tabs local display/ | SPC t C          |
| centaur-tabs-forward        | /Next tab/                  | g <right> or g t |
| centaur-tabs-backward       | /Previous tab/              | g <left> or g T  |
| centaur-tabs-forward-group  | /Next tab group/            | g <down>         |
| centaur-tabs-backward-group | /Previous tab group/        | g <up>           |

#+BEGIN_SRC emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "â€¢")
(map! :leader
      :desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
      :desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+END_SRC
* Doom Theme
Setting the theme to doom-gruvbox.  To try out new themes use 'SPC h t'.
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC
* Fonts
Here's how to enable ligatures:
https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/ligatures#not-emacs-mac-and-emacs--27
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 13)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 13)
      doom-big-font (font-spec :family "Fira Code" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
(setq global-prettify-symbols-mode t)
#+END_SRC

** Ligature Test:
Use this to see if your ligatures are working correctly
*** Not Equal: !=
*** Equal Equal: ==
*** Triple Equal: ===
*** Colon Equal: :=
*** AND AND: &&

* Emoji
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+END_SRC

* Terminal Mouse Mode
#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode 1)
#+END_SRC

* OPEN SPECIFIC FILES
Keybindings to open files that I work with all the time using the find-file command, which is the interactive file search that opens with 'C-x C-f' in GNU Emacs or 'SPC f f' in Doom Emacs.  These keybindings use find-file non-interactively since we specify exactly what file to open.  The format I use for these bindings is 'SPC -' plus 'key' since Doom Emacs does not use these keybindings.

| PATH TO FILE                   | DESCRIPTION           | KEYBINDING |
|--------------------------------+-----------------------+------------|
| ~/Org/agenda.org               | /Edit agenda file/      | SPC - a    |
| ~/.config/doom/config.org"     | /Edit doom config.org/  | SPC - c    |
| ~/.config/doom/eshell/aliases" | /Edit eshell aliases/   | SPC - e a  |
| ~/.config/doom/eshell/profile" | /Edit eshell profile/   | SPC - e p  |
| ~/.config/doom/init.el"        | /Edit doom init.el/     | SPC - i    |
| ~/.config/doom/packages.el"    | /Edit doom packages.el/ | SPC - p    |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("-" . "open file")
       :desc "Edit agenda file" "a" #'(lambda () (interactive) (find-file "~/org/agenda/agenda.org"))
       :desc "Edit doom config.org" "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
       :desc "Edit eshell aliases" "e a" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/aliases"))
       :desc "Edit eshell aliases" "e p" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/profile"))
       :desc "Edit doom init.el" "i" #'(lambda () (interactive) (find-file "~/.config/doom/init.el"))
       :desc "Edit doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.config/doom/packages.el"))))
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
(after! org
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-directory "~/org/"
        org-agenda-files (directory-files-recursively "~/org/agenda" "\\.org$")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        ;; org-log-done 'note ;; Adds a Note and time stamp
        org-log-done 'time ;; Adds just a time stamp
        org-hide-emphasis-markers t))

;; Capture Templates
(after! org (setq org-capture-templates
    '(("a" "Agenda Todo" entry (file "~/org/agenda/Refile.org")
       "\n\n** TODO %?\nSCHEDULED: <%(org-read-date nil nil \"+1d\")>" :empty-lines 1)
       ("t" "Todo" entry (file "~/org/agenda/Refile.org")
       "* TODO %?\n%U" :empty-lines 1)
      ("T" "Todo with Clipboard" entry (file "~/org/agenda/Refile.org")
       "* TODO %?\n%U\n   %c" :empty-lines 1)
      ("n" "Note" entry (file "~/org/agenda/Refile.org")
       "* NOTE %?\n%U" :empty-lines 1)
      ("N" "Note with Clipboard" entry (file "~/org/agenda/Refile.org")
       "* NOTE %?\n%U\n   %c" :empty-lines 1)
      ("e" "Event" entry (file+headline "~/org/agenda/Events.org" "Transient")
       "* EVENT %?\n%U" :empty-lines 1)
      ("E" "Event With Clipboard" entry (file+headline "~/org/agenda/Events.org" "Transient")
       "* EVENT %?\n%U\n   %c" :empty-lines 1)
      ("l" "Link" entry (file "~/org/agenda/Link.org")
        "* TODO %a %? %^G\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")
      ("j" "Journal" entry (file+datetree "~/org/agenda/Journal.org")
        "* %? %^G\nEntered on %U\n")
     )))

;; Org Capture Shortcut C-c c
(global-set-key (kbd "C-c c") 'org-capture)

;; Use org-refile: Increase heading level
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

;; Org Roam directory
(setq org-roam-directory "~/org/roam")
#+END_SRC

* Spell Checking
Enable (spell +flyspell in init.el)
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

* Line Numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

* IVY
Ivy is a generic completion mechanism for Emacs.

** IVY-POSFRAME
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu.  Some of the settings below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for specific programs
+ ivy-posframe-height-alist -- sets the height of the list displayed for specific programs

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+BEGIN_SRC emacs-lisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

** IVY KEYBINDINGS
By default, Doom Emacs does not use 'SPC v', so the format I use for these bindings is 'SPC v' plus 'key'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+END_SRC


